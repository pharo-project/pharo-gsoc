[
  {
    "id": "connect4MiniMax",
    "title": "Connect 4 game with AI",
    "img": "connect4.png",
    "supervisors": [
      "Sebastian Jordan"
    ],
    "description": "This project aims to develop a connect 4 game with an AI algorithm to play against humans. We will test the algorithm by playing humans vs. AI to see who wins. The first part will be building the GUI of the game using Bloc (https://github.com/pharo-graphics/bloc). Then, we will develop the AI algorithm that can play the game. The algorithm is alpha-beta-pruning (https://en.wikipedia.org/wiki/Alpha-beta_pruning)",
    "goal": "Build a connect 4 game with a graphical user interface that is playable. Develop the alpha-beta pruning AI algorithm to play the game against humans.",
    "keywords": [
      "AI",
      "game-theory",
      "Bloc",
      "games"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Communication skills",
        "OOP",
        "Pharo"
      ],
      "preferred": ["Basic AI knowledge"]
    }
  },
  {
    "id": "serialization",
    "title": "Better Serialization Support",
    "img": "guille-serialization.jpeg",
    "supervisors": [
      "Guillermo Polito"
    ],
    "description": "This project aims at redesigning the textual and binary serialization support. Pharo has several textual serialization mechanisms (printOn, displayOn, storeOn, STON), and pickle binary format using Fuel.  Some of them are non-working or require a lot of manual work, and some of them are inefficient. Most of them repeat some code and can be replaced with another.",
    "goal": "- Replace the storeOn mechanism with STON literal serialization (see [pharo #3319](https://github.com/pharo-project/pharo/issues/3319))\n- Review the displayOn mechanism\n- Improve the printOn mechanism to not block on long print strings\n- Improve serialization of methods and block closures\n- Improve the performance of Fuel serialization with an improved identity hash table",
    "keywords": [
      "Serialization"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Refactoring",
        "OOP"
      ],
      "preferred": []
    }
  },
  {
    "id": "code-completion",
    "title": "Better Code Completion for Pharo using AI",
    "img": "guille-completion.jpeg",
    "supervisors": [
      "Stephane Ducasse",
      "Guillermo Polito"
    ],
    "description": "The goal of this project is to experiment with machine learning in the context of the automatic code completion of Pharo.",
    "goal": "To achieve this goal the student will\n- study [Byte Pair encoder](https://youtu.be/HEikzVL-lZU)\n- enhance the [naive implementation](https://github.com/Ducasse/BytePairEncoder)\n- study the extensible completion Framework in Pharo\n\nHe will then run some experiments building “characters” (a character in BPE can be the concatenation of multiple character)\nusing various Pharo information:\n- only the method signature\n- taking into account all the method bodies of Pharo method.\n\nBased on these databases of sequences the student will build some simple benchmarchs to be able to evaluate \nthe best strategies. He will use some industrial case studies to identify key configurations of the completion frameworks.\n\nOther tokenizers may be studied as well\n- [Unigram Tokenization](https://youtu.be/TGZfZVuF9Yc) \n- [WordPiece Tokenization](https://youtu.be/qpv6ms_t_1A)",
    "keywords": [
      "AI",
      "Machine Learning",
      "NLP",
      "Completion"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "polymath-architecture",
    "title": "Improve the architecture of PolyMath",
    "img": "cyril-polymath.png",
    "supervisors": [
      "Cyril Ferlicot-Delbecque",
      "Oleksandr Zaitsev"
    ],
    "description": "PolyMath is a mathematical library in Pharo that implements various algorithms and data structure for algebra, matrix-vector operations, numerical analysis, differential equations, etc. It is similar to  NumPy and SciPy in Python or SciRuby in Ruby. \n\nThe goal of this project is to improve the overall quality of the PolyMath library in term of architecture and API. This includes improving the internal dependencies of PolyMath to make it more modular, proposing a more intuitive and unified API for the existing algorithms.\n\nStudents will also be encouraged to implement new algorithms for PolyMath or to create tutorials and blog posts for the existing ones. The PolyMath library has a very dynamic community so students will receive a lot of feedback and guidance to help them complete this project.",
    "goal": "- A more modular system\n- Cleaner dependencies\n- Improved API\n- Documentation\n- New algebra algorithms",
    "keywords": [
      "Math",
      "Algebra",
      "Infrastructure",
      "API"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo"
      ],
      "preferred": [
        "Be comfortable with math"
      ]
    }
  },
  {
    "id": "ui-builder",
    "title": "A Pharo User-Interface Builder",
    "img": "hernan-builder.jpg",
    "supervisors": [
      "Hernan Morales",
      "Sebastian Jordan"
    ],
    "description": "Implement a designer application to develop graphical user interfaces (GUI) in Pharo. This will allow Pharo developers to build product functionality and focus on design instead of writing repetitive UI code and manually composing the UI layout. Widgets will be selected and dragged from a components tree, customized on a style pane, and the UI code will be generated. The tool will use Spec 2 (a framework in Pharo for describing user interfaces), and PCG (a Pharo Code Generator which allows AST manipulation). The emmited source code should be used to rebuild the user interface, including generation of event triggers, in the designer.",
    "goal": "The GUI designer will be able to recreate UI designs from generated code, for post-edition and re-generation.",
    "keywords": [
      "UI",
      "Design",
      "Builder"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Pharo",
        "AST"
      ],
      "preferred": [
        "Code Generation",
        "AST Manipulation"
      ]
    }
  },
  {
    "id": "dds-binding",
    "title": "DDS Binding for Pharo",
    "img": "santi-dds.jpeg",
    "supervisors": [
      "Santiago Bragagnolo"
    ],
    "description": "ROS 2 is taking over the ROS Project. With this, many of our robotic implementations in Pharo will become obsolete. ROS2 uses an entirely different means of communication from ROS1. To enable ROS2 robotic development in Pharo, we need to provide bindings to at least one Data Delivery Service (DDS) system used by ROS. The project includes quickly analysing the three DDS vendors supported by ROS: eProsima, Eclipse Cyclone and Gurum Networks. Choose one of them, and implement the required bindings in Pharo to enable the communication.",
    "goal": "- A Pharo binding library to at least one DDS implementation\n- Tests",
    "keywords": [
      "DDS",
      "ROS",
      "Pharo",
      "Robotics"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Network",
        "FFI",
        "Pharo",
        "TDD"
      ],
      "preferred": [
        "ROS",
        "Distributed System Programming"
      ]
    }
  },
  {
    "id": "eclipse-lsp",
    "title": "Eclipse-LSP in Pharo",
    "img": "nicolas-ide.png",
    "supervisors": [
      "Nicolas Anquetil",
      "Benoit Verhaeghe"
    ],
    "description": "The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete or rule violations (see picture). There is an initial implementation of LSP in Pharo. We are looking at making it work with the Eclipse SLP client plugin. This will involve straightening the existing SLP implementation (writing tests) and understand how Eclipse SLP plugin work.",
    "goal": "- A better SLP implementation in Pharo (more robust, with tests)\n- a better comprehension of how Eclipse SLP plugin works and what can be done with it",
    "keywords": [
      "Language Server Protocol",
      "Pharo",
      "Eclipse"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Meta Programming",
        "Eclipse Plugin"
      ],
      "preferred": [
        "Pharo"
      ]
    }
  },
  {
    "id": "ide-improvements",
    "title": "IDE improvements",
    "img": "guille-ide.jpeg",
    "supervisors": [
      "Guillermo Polito",
      "Nahuel Palumbo"
    ],
    "description": "Improve several IDE and text editor capabilities, such as shortcut navigation, text drag n drop, better parenthesis support, and autocompletion.",
    "goal": "- Add text drag n drop support (see [pharo #2634](https://github.com/pharo-project/pharo/issues/2634))\n- Enhance parenthesis support (see [pharo #2635](https://github.com/pharo-project/pharo/issues/2635))\n- Allow enabling\/disabling tools and shortcuts (see [pharo #2649](https://github.com/pharo-project/pharo/issues/2649))\n- Add autocompletion hooks (see Autocompletion hooks: [pharo #3177](https://github.com/pharo-project/pharo/issues/3177))\n- Enhance dependency analyser precision (see Dependency analyser precision: [pharo #3470](https://github.com/pharo-project/pharo/issues/3470)).",
    "keywords": [
      "IDE",
      "Tooling",
      "Text Editor",
      "Autocompletion"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Refactoring",
        "OOP",
        "Code Analysis"
      ],
      "preferred": []
    }
  },
  {
    "id": "standard-library-api",
    "title": "Improve Standard Library APIs",
    "img": "guille-library.jpeg",
    "supervisors": [
      "Guillermo Polito",
      "Sebastian Jordan"
    ],
    "description": "The objective of this project is to improve the Pharo standard library.\nThis project includes low-level improvements in arithmetics, color APIs and collections.\nSuch changes will be backed up by benchmarks to show no performance improvements are introduced.",
    "goal": "We expect at least fixes in the following aras:\n- Collections should use better default sorting algorithms (see [pharo #2866](https://github.com/pharo-project/pharo/issues/2866))\n- Improve Color API (see [pharo #3264](https://github.com/pharo-project/pharo/issues/3264))\n- Speeding up arithmetics (see [pharo #3322](https://github.com/pharo-project/pharo/issues/3322))\n- Redesign Collection cancelled methods (see [pharo #4113](https://github.com/pharo-project/pharo/issues/4113))",
    "keywords": [
      "Redesign",
      "Optimisation",
      "Standard Library"
    ],
    "size": "Medium",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "OOP",
        "Refactoring"
      ],
      "preferred": []
    }
  },
  {
    "id": "data-structures-and-algorythms",
    "title": "Implementation of standard data stractures and algorythms",
    "img": "gordana-trees.jpeg",
    "supervisors": [
      "Gordana Rakic",
      "Stephane Ducasse"
    ],
    "description":"Support for data structures such as various kinds of lists and trees are weakly supported in Pharo, while the ones that are implemented are not wel designed which makes maintenance and extensions more difficult. A nice data structures desing with a stable and reflective API together with corresponding algorythem implementatin are the main task in this project idea."
    "goal":"The mian goal is to create a felxible and extensible data structures design and to implement at least some of basic lists such as (double-)linked lists, a heap, a stack, a buffer, and some of basic trees e.g. a binary tree, a binary search tree, a self-balancing tree, an AVL, a red-black, or a B-tree.  
     "keywords": [
      "Design",
      "API",
      "Data Structures"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Data structure and algorythms"
      ],
      "preferred": []
    }
    
  },
  {
    "id": "system-and-security",
    "title": "System and Security Improvements",
    "img": "guille-security.jpeg",
    "supervisors": [
      "Guillermo Polito"
    ],
    "description": "The objective of the project is to improve system integration in standard libraries.\nFor example, the system's locale support could be improved to access the system's language, text encoding, number and date formatting. Similar improvements could be brought to sockets, zip files, downloads.",
    "goal": "We expect to solve the following issues:\n- Checksums of downloads: [pharo #3391](https://github.com/pharo-project/pharo/issues/3391)\n- Locale redesign: [pharo #3844](https://github.com/pharo-project/pharo/issues/3844)\n- Unix sockets: [pharo #4046](https://github.com/pharo-project/pharo/issues/4046)\n- Bootstrap improvements: [pharo #4269](https://github.com/pharo-project/pharo/issues/4269)",
    "keywords": [
      "System Integration",
      "Low-level"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Encodings",
        "Foreign Function Interface"
      ],
      "preferred": [
        "OOP"
      ]
    }
  },
  {
    "id": "druid-optimisation",
    "title": "Optimisations for a Meta-Compiler",
    "img": "nahue-druid.png",
    "supervisors": [
      "Nahuel Palumbo",
      "Guillermo Polito"
    ],
    "description": "This project has the objective of improving the optimisation capabilities of the Druid meta-compiler. Druid is a meta-compiler that generates Just-In-Time Compiler code from an Interpreter definition. It performs an abstract meta-interpretation to generate an SSA-based Intermediate Representation (IR); this IR is optimised and used to generate machine code. With Druid, language implementors can define their interpreters and generate a JIT Compiler from them.",
    "goal": "Implement some optimisation over Druid's IR, such as Dead Store Elimination, Class Hierarchy Analysis, and Arithmetic Operations Transformation. It is possible also to improve any already implemented optimisations such as Inline, Global Value Numbering, Loop Invariant Code Motion, etc.",
    "keywords": [
      "Optimisation",
      "SSA",
      "Compilation"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP"
      ],
      "preferred": [
        "Compilers"
      ]
    }
  },
  {
    "id": "pharo-optimisation",
    "title": "Optimising Pharo Compiler",
    "img": "nahue-opt-pharo.png",
    "supervisors": [
      "Nahuel Palumbo",
      "Pablo Tesone"
    ],
    "description": "This is an experiment to inline Pharo methods at the bytecode level. The idea is to collect information about the methods that are called for some message sends and recompile the sender method inlining the callees. The main goal is to reduce the number of method calls in the VM and improve performance.",
    "goal": "Generate optimised bytecode for Collection's methods. It means developing a type system to collect the type info from PICs, and recompile the methods with an optimising compiler (WIP). We also want to measure the performance of this strategy.",
    "keywords": [
      "Optimisation",
      "Inline",
      "Compilation"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "OOP"
      ],
      "preferred": [
        "Compilers"
      ]
    }
  },
  {
    "id": "spatial-data",
    "title": "Classes and Methods for Spatial Data manipulation",
    "img": "etienne-gis.jpg",
    "supervisors": [
      "Etienne Delay"
    ],
    "description": "We propose to explore structure to spatial data finding a way to handle different types of geospatial data in pharo. Once the data is manipulable with our tools the goal is to develop some spatial method allowing for users to deal with spatial data. For that we will start from tools already existing in pharo like the packages : geometry, shapes, geo-json and territorial, but also in other programming languages (as r or python) in order to implement spatial methods for the community. The main objective will be first to be able to load a geojson file, to visualize it and to basic geometric operations.",
    "goal": "DSL compatible with OGS standar for spatial data manipulation",
    "keywords": [
      "Simple Feature",
      "GIS",
      "Spatial"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo"
      ],
      "preferred": [
        "GIS"
      ]
    }
  },
  {
    "id": "microdown-blog",
    "title": "A lightweigth Microdown-based Blog engine",
    "img": "stef-blog.jpeg",
    "supervisors": [
      "Stephane Ducasse"
    ],
    "description": "With Pharo 11, Microdown is now used to write books, slides, render class comments, render documentation. It is becoming a central piece for Pharo documents and documentations. The next step is to support the definition of blog. This way Pharo will be able to navigate and display another important source of information within Pharo: its own blogs. The astute reader may wonder why not using other systems for building blog because we have to have the full control on a simple blog engine that we can just deploy with Pharo. ",
    "goal": "The student will:\n- study microdown, its visitors\n- study the export to HTML \n- build some logic to summarise a blog post, a monthly sorting of blog post, a full post display\n\nWe will test this blog engine on the [Pharo Weekly blog](https://pharoweekly.wordpress.com/)\nIn a second iteration a search component will be developed.",
    "keywords": [
      "Microdown",
      "HTML",
      "Blog"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "sequence-editor",
    "title": "Sequence Viewer/Editor",
    "img": "hernan-dna.jpg",
    "supervisors": [
      "Hernan Morales",
      "Oleksandr Zaitsev"
    ],
    "description": "Implement a viewer/editor of nucleic acid or protein sequences. The viewer is used to visualize, search and analyze sequences and it should adapt its view interface depending on the sequence type. The editor features allows to modify, create, and annotate sequences. External tools could be linked to the editor to streamline a multi-step bioinformatics analysis such as MSA (Multiple Sequence Alignment), ORF finders, consensus sequence visualization, identification of homologous protein or nucleotide sequences, restriction enzyme finders, etc. The BioSmalltalk library already provides a basic language toolkit to start working with biological sequences in Pharo.",
    "goal": "The viewer/editor will establish a baseline tool to address many common workflows at biological sequences, facilitating connections with bioinformatics tools from Pharo",
    "keywords": [
      "Bioinformatics",
      "Sequence Analysis",
      "Sequence Alignments"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Bioinformatics"
      ],
      "preferred": [
        "Spec2",
        "FFI"
      ]
    }
  },
  {
    "id": "data-frame",
    "title": "DataFrame",
    "img": "dataframe.png",
    "supervisors": [
      "Cyril Ferlicot-Delbecque",
      "Oleksandr Zaitsev",
      "Serge Stinckwich"
    ],
    "description": "DataFrame was introduced to Pharo during the GSoC 2017 (https://github.com/PolyMathOrg/DataFrame). The work on DataFrame continued and many new features were introduced by different contributors. However, it is still a work in progress and a huge portion of functionality that can be found in other data frame packages (e.g. R, pandas) is missing.",
    "goal": "The goal of this project is to introduce new functionality to DataFrame and write examples of applying DataFrame to real problems of Data Science (one can reproduce examples from pandas and scikit-learn documentation, as well as some examples from R-bloggers)",
    "keywords": [
      "data science",
      "data analysis",
      "dataframe",
      "tabular data",
      "statistics"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "dr-tests",
    "title": "DrTests",
    "img": "drtests.jpeg",
    "supervisors": [
      "Stephane Ducasse",
      "Sebastian Jordan"
    ],
    "description": "DrTests is a Pharo tool that we use to run several tests cases at once.\nIt is very useful when developping because we have the power to run a selected scope of tests from different packages to control the situation of the tests.",
    "goal": "The goal is to improve DrTests, add more features to have a new version to it that will be the default Test Runner of Pharo.",
    "keywords": [
      "unit tests",
      "tools",
      "test runner"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "pca-methods",
    "title": "PCA Methods",
    "img": "pca.png",
    "supervisors": [
      "Cyril Ferlicot-Delbecque",
      "Oleksandr Zaitsev"
    ],
    "description": "Write an object-model in Pharo to provide Principal Component Analysis (PCA) variants such as Sparse PCA, Randomized PCA, Incremental PCA and Kernel PCA (Centering).\nThe PolyMath library already provides an implementation of PCA which could be used as basis for extending with.",
    "goal": "Having a solid library for doing principal component analysis",
    "keywords": [
      "pca",
      "sva",
      "dimensionality reduction"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Communication skills"
      ],
      "preferred": []
    }
  },
  {
    "id": "tensor-flow-plugin",
    "title": "TensorFlow Plugin",
    "img": "tensorflow.png",
    "supervisors": [
      "Sebastian Sastre",
      "Sebastian Jordan"
    ],
    "description": "Lets make a TensoFlow plugin (not FFI) for Pharo and unblock Pharo AI possibilities by putting it among the ones at the top of the AI pyramid! It will be C TensoFlow used by C our plugin by our C VM using the GPU silicon at its fullest. A path to mine GPU power in the most efficient way in the Smalltalk friendly and powerful way. No other bridges needed. Then all the algebra and AI Smalltalk libraries would be able to use TensoFlow like a boss.",
    "goal": "All the primitives to the TensorFlow API having at least 1 unit test for quality assurance would be the definition of done.",
    "keywords": [
      "Artificial Intelligence",
      "TensorFlow",
      "Machine Learning",
      "GPU"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Basic C",
        "Familiarity with how the Pharo VM is created",
        "Familiarity with Slang",
        "Communication skills"
      ],
      "preferred": [
        "Having done a Pharo plugin"
      ]
    }
  },
  {
    "id": "VirtualIoTDevices",
    "title": "Virtual Devices for PharoThings",
    "img": "gordana-iot.jpg",
    "supervisors": [
      "Oleksandr Zaitsev",
      "Gordana Rakic"
    ],
    "description": "PharoThings implements communication with a connected physical hardware or with a remote one through TelePharo when the local hardware is not available. This makes PharoThings strongly dependent on physical hardware. Elimination of this dependency might be very useful  for learning and testing purposes, while it is possible by simulation of hardware response by random actions of virtual objects playing hardware roles.",
    "goal": "Design and implement solution that provides higher availability of remote devices through TelePharo by inclusion of virtual devises when physical ones are not present.",
    "keywords": [
      "IoT",
      "TelePharo",
      "PharoThings"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "IoT",
        "Communication skills"
      ],
      "preferred": [
        "PharoThings",
        "TelePharo"
      ]
    }
  },
  {
    "id": "ffi",
    "title": "Accelerate FFI calls through JIT compilation",
    "img": "guille-ffi.jpg",
    "supervisors": [
      "Guillermo Polito"
    ],
    "description": "This project aims at adding JIT compiler support for common FFI calls, to accelerate calls and marshalling",
    "goal": "Profile FFI libraries to know what are the most used FFI call signatures; Refactor the cogit JIT compiler to detect FFI callout code; Introduce backend specific code for common call signatures in x86-64 and ARM64",
    "keywords": [
      "compilation",
      "jit compilation",
      "library integration",
      "ffi"
    ],
    "size": "Medium",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "compilers",
        "OOP",
        "assembly"
      ],
      "preferred": []
    }
  },
  {
    "id": "CFGInTesting",
    "title": "Using CFG to analyze tests",
    "img": "gordana-cfg.jpg",
    "supervisors": [
      "Pablo Tesone",
      "Gordana Rakic"
    ],
    "description": "To produce an initial model that represents the Control-Graph-Flow (CFG) of an Pharo application, including application tests, we need to perform an static analysis on the program. The analysis of the program is done traversing Abstract Syntax Tree (AST) of the methods, and class definitions. Pharo provides a set of existent tools to manipulate and traverse ASTs, and reflective tools to inspect programs in Pharo. Also, there are implementations of required tools to be used or extended (AST interpreters, CFG extraction tools, type inferers (Phineas), etc). This task can be divided in three main points: (1) developing the CFG model, (2) extract the information from the Pharo AST, (3) perform traversal and analyses over it. For extracting the information in the AST and form the CGF, the student should use tools already existent in Pharo (AST interpreters/Type inferer). Finally, it can be possible to perform an analysis on the existing information. For example, it is possible to extract the effective classes and methods that are covered by a given test; or calculate the dependencies between classes and methods. This topic provides an oportunity of working on the meta-level of programs, while the student will learn how to get information from an existing program, and how to reflect about it. These tools and abilities are basic when working with programming languages, refactorings, tools, etc.",
    "goal": "Create the CFG model and design and implement solution that traverses the AST and builds the CFG extracts the information from the Pharo AST, performs traversal and analyses over it, orimarily analysis of tests.",
    "keywords": [
      "Abstract Syntax Tree (AST)",
      "Control-Flow Graph (CFG)",
      "Static Analysis",
      "Software Testing"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "Communication skills"
      ],
      "preferred": [
        "Testing",
        "Type Inference"
      ]
    }
  },
  {
    "id": "FaultLocation",
    "title": "Fault Location DrTest Plugin",
    "img": "fault-location.jpg",
    "supervisors": [
      "Juan Pablo Sandoval",
      "Geraldine Galindo",
      "Kevin Cespedez"
    ],
    "description": "In this project, the student will implement two or three different fault location algorithms, for this, it will also be necessary to implement a matrix coverage. Then we will integrate the fault location algorithms in the DrTest UI tool, and of course to Pharo itself.",
    "goal": "The goal is implement a plugin for DrTest that implements two or three fault location state-of-the-art algorithms.",
    "keywords": [
      "Fault Location",
      "DrTest",
      "Dynamic Analysis",
      "Software Testing"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "Communication skills"
      ],
      "preferred": [
        "Testing",
        "Dynamic Analysis"
      ]
    }
  }
]
