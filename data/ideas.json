[
   {
    "id": "Phizura",
    "title": "Phizura: Live Music Coding!",
    "img": "phizura.jpg",
    "supervisors": ["Sebastian Jordan", "Domenico Cipriani"],
    "description": "Phizura is a cool music recording project that uses the Coypu package in Pharo to help DJs create and play music live. Coypu is a set of tools designed for programming music on-the-fly, originally made for SymbolicSound Kyma but compatible with any OSC-enabled app and MIDI hardware. It features a user-friendly syntax inspired by TidalCycles, making it easy to interact with music software. By capturing the commands and timing of their performances, Phizura will turn these into easy-to-read code. This means DJs can record their sets and reproduce them later, making it a fun way to document their creativity!",
    "goal": "The goal of Phizura is to build a system that lets DJs record and replay their live performances through generated code. Students will get hands-on experience with music programming while creating something exciting and useful. Phizura will help them explore new ways to make and share music!",
    "keywords": ["live music" , "recorder" , "instrumentation"],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Basic OOP",
        "Unit tests",
        "Pharo"
      ],
      "preferred": [
        "Object oriented programming"
      ]
    }
   },
   {
    "id": "dockerScratchDeployments",
    "title": "Pharo VM running as Docker Scratch image",
    "img": "dockervm.png",
    "supervisors": [
      "Tim Mackinnon"
    ],
    "description": "This project aims to enable an efficient deployment mechanism for Pharo applications, where they run in a Docker scratch (layer 0) image without any operating system dependency or overhead. Being able to run pharo in an efficient docker image simplifies deployment particularly in the web space where docker images are becoming a defacto standard. Pharo is quite unique as its possible to run without any file io dependencies in a self contained manner that matches scratch image requirements. The smaller size of a scratch image also means improved resource management and also reduces secuirty risks inherent with operating system overhead that isn't needed for many classes of pharo application, particularly web based ones. The student will need to study the hello world docker scratch example and then figure out how to statically compile the vm, necessary plugins and image so that no dynamic operating system dependencies are needed for execution.",
    "goal": "Have a pharo vm+image run in a docker scratch image where there is no operating system dependency or overhead",
    "keywords": [
      "docker",
      "deployment",
      "security"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Docker",
        "VM",
        "CI/CD",
        "C",
        "Pharo"
      ],
      "preferred": [
        "Web Applications"
      ]
    }
  },
  {
    "id": "code-text-improvements",
    "title": "Improve coding UX",
    "img": "palu-text.png",
    "supervisors": [
      "Gabriel Darbord",
      "Nahuel Palumbo"
    ],
    "description": "Improve the text editor capabilities for coding. It includes text drag n drop, better parenthesis support, and multiple selection.",
    "goal": "- Support multi-cursor/selection (see [pharo #17788](https://github.com/pharo-project/pharo/issues/17788))\n- Add text drag n drop support (see [pharo #2634](https://github.com/pharo-project/pharo/issues/2634))\n- Enhance parenthesis support (see [pharo #2635](https://github.com/pharo-project/pharo/issues/2635)).",
    "keywords": [
      "IDE",
      "Tooling",
      "Text Editor",
      "Coding"
    ],
    "size": "Medium",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "OOP",
        "Debugging",
        "Code Analysis"
      ],
      "preferred": [
        "UI/UX"
      ]
    }
  },
  {
    "id": "data-structures-and-algorithms",
    "title": "Implementation of standard data structures and algorithms",
    "img": "gordana-trees.png",
    "supervisors": [
      "Gordana Rakic",
      "Stéphane Ducasse",
      "Sebastian Jordan"
    ],
    "description": "Support for data structures such as various kinds of lists and trees are weakly supported in Pharo, while the ones that are implemented are not wel designed which makes maintenance and extensions more difficult. A nice data structures design with a stable and reflective API together with corresponding algorithms implementation are the main task in this project idea.",
    "goal": "The main goal is to create a flexible and extensible data structures design and to implement at least some of basic lists such as (double-)linked lists, a heap, a stack, a buffer, and some of basic trees e.g. a binary tree, a binary search tree, a self-balancing tree, an AVL, a red-black, or a B-tree.",
    "keywords": [
      "Design",
      "API",
      "Data Structures"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Data structures and algorithms"
      ],
      "preferred": []
    }
  },
  {
    "id": "druid-optimisation",
    "title": "Optimisations for a Meta-Compiler",
    "img": "nahue-druid.png",
    "supervisors": [
      "Nahuel Palumbo",
      "Guillermo Polito"
    ],
    "description": "This project has the objective of improving the optimisation capabilities of the Druid meta-compiler. Druid is a meta-compiler that generates Just-In-Time Compiler code from an Interpreter definition. It performs an abstract meta-interpretation to generate an SSA-based Intermediate Representation (IR); this IR is optimised and used to generate machine code. With Druid, language implementors can define their interpreters and generate a JIT Compiler from them.",
    "goal": "Implement some optimisation over Druid's IR, such as Dead Store Elimination, Class Hierarchy Analysis, and Arithmetic Operations Transformation. It is possible also to improve any already implemented optimisations such as Inline, Global Value Numbering, Loop Invariant Code Motion, etc.",
    "keywords": [
      "Optimisation",
      "SSA",
      "Compilation"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP"
      ],
      "preferred": [
        "Compilers"
      ]
    }
  },
  {
    "id": "pharo-optimisation",
    "title": "Optimizing the Pharo Compiler with Bytecode-Level Inlining",
    "img": "nahue-opt-pharo.png",
    "supervisors": [
      "Nahuel Palumbo",
      "Pablo Tesone"
    ],
    "description": "This project explores inlining Pharo methods at the bytecode level to improve performance. The approach involves gathering runtime information about method calls and recompiling the sender method with inlined callees. By reducing the number of method calls in the VM, this optimization aims to enhance execution speed.",
    "goal": "Optimize bytecode generation for Collection methods by:\n- Developing a type system to gather type information at runtime.\n- Extending the experimental optimizing compiler to use collected types for inlining message sends.\n- Tracking inlined methods to ensure automatic recompilation when modified.\n\nThis experiment seeks to refine Pharo’s compilation strategy, leveraging method inlining for better performance while maintaining flexibility in dynamic code updates.",
    "keywords": [
      "Optimisation",
      "Inline",
      "Compilation"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "OOP"
      ],
      "preferred": [
        "Compilers"
      ]
    }
  },
  {
    "id": "VirtualIoTDevices",
    "title": "Virtual Devices for PharoThings",
    "img": "gordana-iot.jpg",
    "supervisors": [
      "Oleksandr Zaitsev",
      "Gordana Rakic"
    ],
    "description": "PharoThings implements communication with a connected physical hardware or with a remote one through TelePharo when the local hardware is not available. This makes PharoThings strongly dependent on physical hardware. Elimination of this dependency might be very useful  for learning and testing purposes, while it is possible by simulation of hardware response by random actions of virtual objects playing hardware roles.",
    "goal": "Design and implement solution that provides higher availability of remote devices through TelePharo by inclusion of virtual devises when physical ones are not present.",
    "keywords": [
      "IoT",
      "TelePharo",
      "PharoThings"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "IoT",
        "Communication skills"
      ],
      "preferred": [
        "PharoThings",
        "TelePharo"
      ]
    }
  },
  {
    "id": "CFGInTesting",
    "title": "Using CFG to analyze tests",
    "img": "gordana-cfg.jpg",
    "supervisors": [
      "Pablo Tesone",
      "Gordana Rakic"
    ],
    "description": "To produce an initial model that represents the Control-Graph-Flow (CFG) of an Pharo application, including application tests, we need to perform an static analysis on the program. The analysis of the program is done traversing Abstract Syntax Tree (AST) of the methods, and class definitions. Pharo provides a set of existent tools to manipulate and traverse ASTs, and reflective tools to inspect programs in Pharo. Also, there are implementations of required tools to be used or extended (AST interpreters, CFG extraction tools, type inferers (Phineas), etc). This task can be divided in three main points: (1) developing the CFG model, (2) extract the information from the Pharo AST, (3) perform traversal and analyses over it. For extracting the information in the AST and form the CGF, the student should use tools already existent in Pharo (AST interpreters/Type inferer). Finally, it can be possible to perform an analysis on the existing information. For example, it is possible to extract the effective classes and methods that are covered by a given test; or calculate the dependencies between classes and methods. This topic provides an oportunity of working on the meta-level of programs, while the student will learn how to get information from an existing program, and how to reflect about it. These tools and abilities are basic when working with programming languages, refactorings, tools, etc.",
    "goal": "Create the CFG model and design and implement solution that traverses the AST and builds the CFG extracts the information from the Pharo AST, performs traversal and analyses over it, orimarily analysis of tests.",
    "keywords": [
      "Abstract Syntax Tree (AST)",
      "Control-Flow Graph (CFG)",
      "Static Analysis",
      "Software Testing"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "Communication skills"
      ],
      "preferred": [
        "Testing",
        "Type Inference"
      ]
    }
  },
  {
    "id": "MOP",
    "title": "Meta-Object Protocol for Object-Centric Debugging Tools Implementation",
    "img": "",
    "supervisors": [
      "Steven Costiou",
      "Valentin Bourcier"
    ],
    "description": "In this project, the student will start for a MOP prototype, improve the MOP design, extend it, test it, and apply it to the implementation of object-centric debuggers.",
    "goal": "Design and implement a meta-object protocol for building object-centric debugging tools.",
    "keywords": [
      "Object-Centric Debugging",
      "Reflection"
    ],
    "size": "Medium",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "OOP",
        "Debugging",
        "Reflection",
        "Communication skills"
      ],
      "preferred": [
        "Reflection"
      ]
    }
  },
  {
    "id": "FaultLocation",
    "title": "Fault Location DrTest Plugin",
    "img": "fault-location.jpg",
    "supervisors": [
      "Juan Pablo Sandoval",
      "Sebastian Jordan"
    ],
    "description": "In this project, the student will implement two or three different fault location algorithms, for this, it will also be necessary to implement a matrix coverage. Then we will integrate the fault location algorithms in the DrTest UI tool, and of course to Pharo itself.",
    "goal": "The goal is implement a plugin for DrTest that implements two or three fault location state-of-the-art algorithms.",
    "keywords": [
      "Fault Location",
      "DrTest",
      "Dynamic Analysis",
      "Software Testing"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "Communication skills"
      ],
      "preferred": [
        "Testing",
        "Dynamic Analysis"
      ]
    }
  },
  {
    "id": "LLMInterface",
    "title": "A Seamless interface between LLMs and Pharo",
    "img": "PharoLLMsInterface.png",
    "supervisors": [
      "Balša Šarenac",
      "Omar Abedelkader"
    ],
    "description": "This project aims to create an intuitive interface between Pharo and large language models (LLMs). By integrating Pharo with LLMs, developers can leverage AI-powered assistance, automation, and natural language processing (NLP) while maintaining Pharo’s unique live programming environment. Perfect project to get familiar with Pharo and different development techniques while enabling its users to experience LLMs in one of the best live environments!",
    "goal": "The goal is to implement native UI interface that will interact with various LLM providers. Users should be able to chat with chosen type of LLM, and create custom actions that will send code to LLMs to make modifications on them.",
    "keywords": [
      "AI",
      "LLM",
      "UI",
      "IDE",
      "Code improvements"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Communication skills"
      ],
      "preferred": [
        "AI",
        "Pharo"
      ]
    }
  },
  {
    "id": "PharoRefactoringEngine",
    "title": "Enhancing Pharo’s Refactoring Engine for a Smarter Development Experience",
    "img": "PharoRefactoringEngine.png",
    "supervisors": [
      "Balša Šarenac",
      "Stéphane Ducasse",
      "Juan Pablo Sandoval"
    ],
    "description": "One of its key strengths is its powerful development environment, which includes an advanced refactoring engine. Originally pioneered in Smalltalk, the refactoring engine plays a crucial role in maintaining code quality, improving design, and enhancing developer productivity. This proposal aims to improve Pharo’s refactoring engine by addressing usability, migrating to modern tools, and extending its capabilities with additional refactorings. By refining the refactoring workflow, this project will ensure a smoother experience for developers while keeping Pharo’s tooling at the forefront of modern software engineering practices. Ideal project to learn a lot about Pharo, ASTs, desgin, refactorings, software engineering in general!",
    "goal": "The goals include: streamlining user experience, migration to new tools and architecture, analysis and implementation of existing refactorings and improved testing.",
    "keywords": [
      "Refactoring Engine",
      "Design",
      "UX",
      "Software engineering",
      "Architecture"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Pharo",
        "Debugging",
        "Communication skills"
      ],
      "preferred": [
        "Testing",
        "Reflection"
      ]
    }
  },
  {
    "id": "game-tiles",
    "title": "Adding Game Tiles and Sprites to Cormas",
    "img": "game-tiles.png",
    "supervisors": [
      "Milton Mamani Torres",
      "Oleksandr Zaitsev"
    ],
    "description": "The current version of Cormas allows us to visualize the space and agents in the simulation using colors and geometric shapes (circles, rectangles, etc.). In this project, we want to add support for custom tilesets like the ones that are used in computer games. This would allow us to greatly improve the visual capabilities of Cormas by using custom pixel art. In Pharo, we already have support for sprites, which means that we know how to implement this project technically and can guide GSoC contributor in this. This project will require a lot of creativity because we expect contributor to propos a nice API and to build a collection of game tiles that can be used in Cormas.",
    "goal": "- Add support for pixel art tilesets to Cormas\n- Propose a collection of default tiles and the methods for loading custom ones\n- Propose an API for configuring Cormas model to use a given tileset\n- Implement some of our existing models with tiles, and demonstrate them through videos and blog posts",
    "keywords": [
      "Visualization",
      "Agent-base modelling",
      "Games",
      "Tilesets",
      "Sprites",
      "Pixel art"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Object-oriented programming"
      ],
      "preferred": [
        "Visualization",
        "Art",
        "Gaming"
      ]
    }
  },
  {
    "id": "sound-effects",
    "title": "Sound Effect Library for Agent-Based Simulations",
    "img": "domenico-sound.jpeg",
    "supervisors": [
      "Domenico Cipriani",
      "Oleksandr Zaitsev"
    ],
    "description": "In Pharo, there is a library for generating and synthesizing music. We want to use it to add sound effects to Cormas simulations. It will start with simple sound effects, for example, when a cow says Mooo or when walking of a grass makes a sound. Then we will explore to which extent a simulation can be perceived through sound. Can different scenarios (high energy / low energy) sound differntly? Can sounds help us understand simulations better? This is an innovative project that can have an important impact in the field participatory simulations by making our tools more accessible and more intuitive for people with disabilities and for the local stakeholders who do not have a technical background.",
    "goal": "- Create simple sound effects in Pharo and release them as a library\n- Assign those sound effects to actions and events in Cormas simulations\n- Build an API for manipulating sounds in Cormas\n- Explore the patterns that emerge is a simulation through sound effects",
    "keywords": [
      "Music",
      "Agent-base modelling",
      "Sound"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Pharo",
        "Object-oriented programming"
      ],
      "preferred": [
        "Cormas",
        "C"
      ]
    }
  },
  {
    "id": "moose-cormas",
    "title": "Analysing Cormas Code with Moose",
    "img": "nicolas-moose.png",
    "supervisors": [
      "Nicolas Anquetil",
      "Oleksandr Zaitsev"
    ],
    "description": "[Moose](https://moosetechnology.org/) is a platform for software and data analysis implemented in Pharo. It provides an extensive toolkit for exploring the source code of a given project, find code defects, bad practices, etc. Cormas is a legacy software system that has been in development for more than 25 years. It has been migrated from one dialect of Smalltalk to another, it has been maintained by different people with different levels of expertise and different programming practices. As such, Cormas is a very interesting case study for code analysis. Using Moose, we can detect dead code (methods that are no longer used), split god classes and methods (the ones that are clearly too large), reorganize packages to reduce coupling, improve test coverage. All this information can be extremely valuable for Cormas development and it can also contribute to the improvement of Moose platform.",
    "goal": "- Learn to use Moose (we have detailed guides and tutorials)\n- Load the source code of Cormas into Moose\n- Perform various analyses and build visualizations\n- Report the findings to the Cormas community\n- Improve the source code of Cormas",
    "keywords": [
      "Code analysis",
      "Code comprehension",
      "Visualizations",
      "Programming"
    ],
    "size": "Medium",
    "difficulty": "Easy",
    "skills": {
      "required": [
        "Pharo",
        "Object-oriented programming"
      ],
      "preferred": [
        "Cormas",
        "Moose"
      ]
    }
  },
  {
    "id": "object-detection",
    "title": "Computer Vision for Game Piece Detection",
    "img": "computer-vision.png",
    "supervisors": [
      "Etienne Delay",
      "Oleksandr Zaitsev"
    ],
    "description": "The goal of this project is to enhance the interactive functionality of Cormas by building a computer vision system for detecting tangible objects such as board game pieces. Such a system would permit people to play a [serious game](https://en.wikipedia.org/wiki/Serious_game) on a physical board and have a camera detect the movement of pieces and automatically update the Cormas model. The game could then be stored, replayed, interacted with, and analysed using Cormas.\n\nObject detection can be implemented based on the smartphone camera or with a more advanced dedicated tool such as [Azure Kinect](https://azure.microsoft.com/en-us/products/kinect-dk/). Adaptation of Cormas platform for receiving live input from real world is a very important aspect of this project.",
    "goal": "- Implement and test the API in Cormas for positioning agents on the spatial grid\n- Implement a prototype of an object detection system using computer vision\n- Connect the implemented object detection system to Cormas\n- Implement calibration and board initialization",
    "keywords": [
      "Computer Vision",
      "Machine Learning",
      "AI",
      "Agent-Based Modeling"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Machine Learing",
        "Computer Vision"
      ],
      "preferred": [
        "Pharo",
        "Python",
        "PyTorch",
        "YOLO",
        "Open CV"
      ]
    }
  },
  {
    "id": "hexagonal-cells",
    "title": "Adding Hexagonal Cells to Cormas Pharo",
    "img": "hexagonal-cells.png",
    "supervisors": [
      "Milton Mamani Torres",
      "Oleksandr Zaitsev"
    ],
    "description": "In VisualWorks version of Cormas, we had a good support for hexagonal cells. In the current version of Cormas that we have in Pharo, we can only use square cells. The goal of this project is therefore to (re-)implement the hexagonal grid. The contribution of this project can also be submitted to [Roassal3](https://github.com/pharo-graphics/Roassal) visualization library. We would like to take inspiration from this article: [Hexagonal Grids from Red Blob Games](https://www.redblobgames.com/grids/hexagons/) to implement the hexagonal geometry in Roassal and use it to enhance the spatial model of Cormas.",
    "goal": "- Implement hexagonal grid layout in Roassal based on the article cited above\n- Use hexagonal layout to add hexagonal cells to the spatial model of Cormas\n- Experiemnt with the possibility of dynamically switching between square and hexagonal grids in the simulation\n- Experiment with other types of grids, for example, triangular",
    "keywords": [
      "Computer Graphics",
      "Geometry",
      "Grids",
      "Hexagonal Cells"
    ],
    "size": "Large",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Pharo",
        "Object-Oriented Programming"
      ],
      "preferred": [
        "Computer Graphics",
        "Geometry",
        "Roassal"
      ]
    }
  },
  {
    "id": "pam",
    "title": "A text-to-speech (TTS) tool for Pharo",
    "img": "dome-pam.jpeg",
    "supervisors": [
      "Domenico Cipriani",
      "Nahuel Palumbo"
    ],
    "description": "The project, named PAM (Pharo Automated Mouth), is inspired by the JavaScript/Web Audio adaptation of [SAM](https://discordier.github.io/sam) (Software Automated Mouth) for the Commodore 64.\n\n This tool is designed to enhance Pharo’s accessibility, making the environment more inclusive for users who rely on speech synthesis. Additionally, we aim to achieve significantly improved audio clarity and intelligibility compared to SAM. \n\n PAM will consist of two core components:\n- A reciter that processes input text, converting it into a phonemic and prosodic representation.\n- A Digital Signal Processor (DSP) that translates these articulation traits into real-time audio.\n\nExpected Outcomes\n- A DSP written in Phausto, offering a selection of four different voice types.\n- A well-documented tool with a modular design, allowing for easy extension to other natural languages.\n- This project aims to provide a robust and extensible TTS solution for Pharo, significantly improving speech synthesis quality while fostering accessibility.",
    "goal": "The goal of this project is to develop a text-to-speech (TTS) tool for Pharo, leveraging Phausto's formant and subtractive synthesis capabilities as the audio backend.\nThere is a [previous work done in Squeak](https://wiki.squeak.org/squeak/651) to take as reference.",
    "keywords": [
      "Sound",
      "Phausto",
      "TTS"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "OOP",
        "Autodidact",
        "Communication skills"
      ],
      "preferred": [
        "Sound synthesis"
      ]
    }
  },
  {
    "id": "fiber",
    "title": "Improve the Green threads / Fiber",
    "img": "guille-fiber.png",
    "supervisors": [
      "Guillermo Polito",
      "Pablo Tesone"
    ],
    "description": "Pharo currently implements Green Threads / Fiber through the Process class. However, certain edge cases exhibit undefined behavior. This project aims to thoroughly test these cases, document the current implementation, identify potential bugs, and work towards fixing them to ensure a more robust and reliable concurrency model.",
    "goal": "Improve the implementation of Green threads / Fiber in Pharo:\n- Find and test border cases\n- Find bugs and fix them.",
    "keywords": [
      "green thread",
      "fiber"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Refactoring",
        "OOP"
      ],
      "preferred": []
    }
  },
  {
    "id": "reg-aloc-jit",
    "title": "Enhance Register Allocation at Control Flow Merge Points During JIT Compilation",
    "img": "guille-reg-aloc-jit.png",
    "supervisors": [
      "Guillermo Polito",
      "Nahuel Palumbo"
    ],
    "description": "The JIT compiler in the Pharo VM uses an Abstract Interpreter to translate Pharo methods into machine code. This interpreter applies optimizations to minimize stack access during register allocation.\n\nCurrently, the implementation maintains a single abstract state per method, even across branches. As a result, the JIT compiler must handle this constraint explicitly, leading to complex and hard-to-understand code when managing control flow merges.\n\nThis project aims to extend the register allocation mechanism to support multiple abstract states, enabling better handling of control flow merge points and improving both code clarity and performance.",
    "goal": "Expand the register allocation strategy to effectively manage multiple abstract states at control flow merge points, simplifying JIT compilation and improving optimization potential.",
    "keywords": [
      "jit compiler",
      "register allocation",
      "abstract interpretation"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Refactoring",
        "OOP"
      ],
      "preferred": [
        "Compilers"
      ]
    }
  },
  {
    "id": "slang-separate",
    "title": "Enhance Slang with Separate Compilation",
    "img": "guille-slang-separate.png",
    "supervisors": [
      "Guillermo Polito",
      "Nahuel Palumbo"
    ],
    "description": "Slang is a framework for writing Virtual Machines in Smalltalk and compiling them to C for performance reasons. It translates selected Smalltalk classes and methods into C code.\n\nCurrently, the generated C code is merged into a few large files, making it difficult to read and manage. This project aims to introduce separate compilation by generating multiple C files—potentially one per class or hierarchy—resulting in smaller, more modular, and more readable code.",
    "goal": "Implement separate compilation in Slang to generate multiple C files, improving readability, maintainability, and compilation efficiency.",
    "keywords": [
      "slang",
      "c code",
      "separate compilation"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Refactoring",
        "OOP",
        "C"
      ],
      "preferred": []
    }
  },
  {
    "id": "object-pointers",
    "title": "Eliminate Object Pointers in JIT-Compiled Code for Better GC Performance",
    "img": "guille-object-pointers.jpg",
    "supervisors": [
      "Guillermo Polito",
      "Nahuel Palumbo"
    ],
    "description": "In the Pharo VM, JIT compilation embeds object pointers directly into compiled machine code. These pointers must be visited during garbage collection to properly manage memory.\n\nCurrently, the Garbage Collector must traverse and disassemble the compiled machine code to locate these pointers, introducing a performance overhead. This project aims to modify both the JIT compiler and the Garbage Collector to use a separate structure—an object-pointer table—to store and access object references efficiently.",
    "goal": "Optimize garbage collection by removing object pointers from JIT-generated machine code. This includes:\n- Identifying where the JIT compiler embeds object pointers.\n- Modifying the JIT compiler to store object references in an object-pointer table instead of inline in the machine code.\n- Updating the Garbage Collector to traverse the object-pointer table instead of disassembling machine code.\n\nThis approach reduces GC overhead, improving performance and simplifying memory management in the Pharo VM.",
    "keywords": [
      "object pointers",
      "jit compiler",
      "garbage collection"
    ],
    "size": "Medium",
    "difficulty": "Hard",
    "skills": {
      "required": [
        "Refactoring",
        "OOP"
      ],
      "preferred": [
        "Compilers",
        "Garbage Collection"
      ]
    }
  },
  {
    "id": "chess-game-bloc",
    "title": "Chess Game with AI",
    "img": "chess.jpg",
    "supervisors": ["Sebastian Jordan"],
    "description": "Develop a chess game with an AI bot player using the [Bloc framework](https://github.com/pharo-graphics/bloc) for the UI.\n Design and build the game architecture, then develop the AI algorithm using advanced strategies to challenge human players.\n Optionally, integrate with the LiChess API for daily chess puzzles and additional features. Squeak chess implementation can be used as a reference.",
    "goal": "The goal is to create a feature-rich chess game with a user-friendly graphical interface and a challenging AI opponent. This project will provide hands-on experience in game development, UI design, API call integration and AI algorithm implementation.",
    "keywords": [
      "AI",
      "Games",
      "Bloc",
      "Chess"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Communication skills",
        "OOP",
        "Pharo"
      ],
      "preferred": [
        "AI and Machine Learning",
        "Software Architecture and Design Patterns",
        "API Integration"
      ]
    }
  }
   ,
  {
    "id": "microdown",
    "title": "Better support for web elements in Foliage/Microdown",
    "img": "MicrodownFoliage.jpg",
    "supervisors": ["Stéphane Ducasse"],
    "description": "Improve the web support of Foliage and Microdown  [Foliage](https://github.com/Ducasse/Foliage) / [Microdown](https://github.com/pillar-markup/Microdown).",
    "goal": "The goal is to extend Microdown and Foliage to support new kinds of components for static websites deployed in Foliage. Examples are shown in the screenshot: list of book descriptions. Other examples are list of publication. Microdown is easily extensible because it has been designed for this kind of scenario.",
    "keywords": [
      "Document model",
      "Markup",
      "Web",
      "Static generation"
    ],
    "size": "Medium",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Communication skills",
        "OOP",
        "Pharo"
      ],
      "preferred": [
        "Visitor, Builder, and other patterns",
        "OO Design"
      ]
    }
  }
      ,
  {
    "id": "CforMoose",
    "title": "C support for Moose",
    "img": "Moose.jpg",
    "supervisors": ["Stéphane Ducasse"],
    "description": "The idea is to define a Moose plugin to support the analysis of C code.",
    "goal": "The goal of the project is to extend the ![moose platform](https://modularmoose.org) to support C program analysis. The student will work on using a C Parser either SmaCC or TreeSitter. He will also define on a FAMIX metamodel definition for C. Then he will work on an importer (a program that given a C AST) will generate a FAMIX model for C.
     The student will work one CPP is applied to the code.",
    "keywords": [
      "Moose model",
      "C",
      "FAMIX",
      "Static analysis"
    ],
    "size": "Large",
    "difficulty": "Medium",
    "skills": {
      "required": [
        "Communication skills",
        "OOP",
        "Pharo"
      ],
      "preferred": [
        "Visitor, Builder, and other patterns",
        "OO Design"
      ]
    }
  }
]
